{"name":"routes-http","tagline":"simple but powerful HTTP request router","body":"# Synopsis\r\n\r\n**routes-http** is a simple HTTP request router for node.js based on [routes](https://github.com/aaronblohowiak/routes.js).\r\n\r\n[![Build Status](https://travis-ci.org/pluma/routes-http.png?branch=master)](https://travis-ci.org/pluma/routes-http) [![NPM version](https://badge.fury.io/js/routes-http.png)](http://badge.fury.io/js/routes-http) [![Dependencies](https://david-dm.org/pluma/routes-http.png)](https://david-dm.org/pluma/routes-http)\r\n\r\n# Features\r\n\r\n## Simple but powerful\r\n\r\n*routes-http* is just a thin wrapper around *routes*. This means if you've used *routes* or routes-based routers before, you can start using *routes-http* right away:\r\n\r\n```javascript\r\nvar routes = require('routes-http')();\r\nroutes.addRoute('/foo/:arg/*', function(req, res, opts) {\r\n    console.log(opts);\r\n});\r\n// … more code …\r\nreq.url = '/foo/bar/qux/baz';\r\nroutes(req, res);\r\n/*\r\n{\r\n    params: {arg: 'bar'},\r\n    splats: ['qux/baz']\r\n}\r\n*/\r\n```\r\n\r\n## Chaining API\r\n\r\nYou can create a router and add all your routes in a single line. No more repeating yourself! The following is perfectly valid:\r\n\r\n```javascript\r\nvar routes = require('routes-http')()\r\n    .addRoute('/foo', function(req, res) {/* … */})\r\n    .addRoute('/bar', function(req, res) {/* … */})\r\n    .addRoute('/qux', function(req, res) {/* … */});\r\n// … more code …\r\nroutes(req, res);\r\n```\r\n\r\n## Semantic error-handling\r\n\r\n*routes-http* uses [httperr](https://github.com/pluma/httperr) for its own errors and allows you to provide an error handler that will be used for all errors, including matching errors:\r\n\r\n```javascript\r\nvar routes = require('routes-http')();\r\nroutes.addRoute('/foo', function(req, res) {/* … */});\r\n// … more code …\r\nreq.url = 'http://localhost/foo';\r\nroutes(req, res, function(err) {\r\n    console.error(err);\r\n});\r\n/*\r\n{ [NotFound]\r\n    title: 'Not Found',\r\n    name: 'NotFound',\r\n    code: 'NOT_FOUND',\r\n    statusCode: 404\r\n}\r\n*/\r\n```\r\n\r\n## Pain-free nesting\r\n\r\nWant to use a separate router for each namespace of your app? No problem. Nesting routes is as simple as defining normal routes. They don't even need to know about each other or that they are nested in order to work:\r\n\r\n```javascript\r\nvar router = require('routes-http'),\r\n    routes = router(),\r\n    childRoutes = router();\r\n\r\nroutes.addRoute('/hello/', childRoutes); // Always use a trailing slash!\r\nchildRoutes.addRoute('/world', function(req, res) {\r\n    res.end('Hello from /hello/world !');\r\n});\r\n```\r\n\r\n## HTTP method dispatching\r\n\r\nWant to have different views for each HTTP method? Just specify an object instead of a function:\r\n\r\n```javascript\r\nvar routes = require('routes-http')();\r\nroutes.addRoute('/foo', {\r\n    GET: function(req, res) {res.end('You used GET');},\r\n    POST: function(req, res) {res.end('You used POST')}\r\n});\r\n\r\n/* … more code … */\r\n\r\nroutes(req, res, function(err) {\r\n    if (err.statusCode === 405) {\r\n        res.writeHead(err.statusCode, err.title, {'Allow': err.allowed.join(', ')});\r\n        res.write('You used ' + req.method + '\\n');\r\n        res.write('Allowed methods: ' + err.allowed.join(', ') + '\\n');\r\n    } else {\r\n        res.writeHead(err.statusCode, err.title);\r\n    }\r\n    res.end(err.statusCode + ' ' + err.title);\r\n});\r\n```\r\n\r\n```sh\r\n$ curl http://localhost:8000/foo\r\nYou used GET\r\n$ curl -X POST http://localhost:8000/foo\r\nYou used POST\r\n$ curl -X DELETE http://localhost:8000/foo\r\nYou used DELETE\r\nAllowed methods: GET, POST\r\n405 Method Not Allowed\r\n```\r\n\r\n## Minimalistic requirements\r\n\r\nWant to use the router without passing in request and response objects? You can do that.\r\n\r\n```javascript\r\nvar routes = require('routes-http')();\r\nroutes.addRoute('/foo', function() {/* … */});\r\nroutes({url: 'http://localhost/foo'}); // Works!\r\nroutes('/foo'); // Also works!\r\n```\r\n\r\n```javascript\r\nvar routes = require('routes-http')();\r\nroutes.addRoute('/foo', function(url, data) {/* … */});\r\nroutes('/foo', {proprietary: 'data-structure'}); // Works!\r\n```\r\n\r\n# Basic Usage Example\r\n\r\n```javascript\r\nvar router = require('routes-http'),\r\n    http = require('http'),\r\n    routes = router();\r\n\r\nroutes.addRoute('/hello/world', function(req, res) {\r\n    res.end('Hello world!');\r\n});\r\nroutes.addRoute('/throws', function(req, res) {\r\n    throw new Error();\r\n});\r\n\r\nhttp.createServer(function(req, res) {\r\n    routes(req, res, function(err) {\r\n        if (err.statusCode && err.title) {\r\n            res.writeHead(err.statusCode, err.title);\r\n            res.end(err.statusCode + ' ' + err.title);\r\n        } else {\r\n            res.writeHead(500, 'Internal Server Error');\r\n            res.end('An error occurred');\r\n        }\r\n    });\r\n}).listen(8000);\r\n```\r\n\r\n```sh\r\n$ curl http://localhost:8000/hello/world\r\nHello World!\r\n$ curl http://localhost:8000/does/not/exist\r\n404 Not Found\r\n$ curl Http://localhost:8000/throws\r\nAn error occurred\r\n```\r\n\r\n# Install\r\n\r\n## With NPM\r\n\r\n```sh\r\nnpm install routes-http\r\n```\r\n\r\n## From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/routes-http.git\r\ncd routes-http\r\nnpm install\r\nmake test\r\n```\r\n\r\n# API\r\n\r\n## routes(req, [res], [handleError:Function])\r\n\r\nResolves the given request and invokes the matching view if possible.\r\n\r\nIf a `handleError` function is passed, the function will be called with the `Error` object if an error is thrown by the view.\r\n\r\nThe matched view will be invoked with the following arguments:\r\n\r\n### req\r\n\r\nThe original request.\r\n\r\n### res\r\n\r\nThe original response.\r\n\r\n### opts\r\n\r\nAn object with two properties:\r\n\r\n#### opts.params\r\n\r\nAn object containing the matched route params. For child routes, the object will contain params matched by their parent routes as well, but child routes will take precedence over parent routes when params are named identically.\r\n\r\nExample:\r\n\r\n```javascript\r\nchildRoutes.addRoute('/:foo', function(req, res, opts) {/* … */});\r\nroutes.addRoute('/:foo/', childRoutes);\r\nroutes({url: '/qux/bar'}); // opts.params = {'foo': 'bar'}\r\n```\r\n\r\n#### opts.splats\r\n\r\nAn array containing the matched route splats. For child routes, the array will contain splats matched by their parent routes as well, with child routes' splats appearing at the end of the array.\r\n\r\nExample:\r\n\r\n```javascript\r\nchildRoutes.addRoute('/*', function(req, res, opts) {/* … */});\r\nroutes.addRoute('/*/foo/', childRoutes);\r\nroutes({url: '/qux/foo/bar'}); // opts.splats = ['qux', 'bar']\r\n```\r\n\r\n## routes.addRoute(path:String, view:Function)\r\n\r\nAdds a route with the given path. The route will resolve to the given function, invoking it when the route is matched.\r\n\r\nIf the route can not be resolved, a `404 Not Found` error will be raised.\r\n\r\n## routes.addRoute(path:String, view:Object)\r\n\r\nAdds a route with the given path. The object is expected to have methods named after the HTTP methods supported by the view that will be invoked when the route is matched with the respective HTTP method.\r\n\r\nIf the route is resolved, but the view object has no matching property for the request's HTTP method, a `405 Method Not Allowed` error will be raised with an array containing the names of the supported HTTP methods as its `allowed` property.\r\n\r\nExample:\r\n\r\n```javascript\r\nroutes.addRoute('/foo/bar', {\r\n    GET: function(req, res) { // Always use uppercase!\r\n        res.end('You have sent a GET request.');\r\n    },\r\n    POST: function(req, res) {\r\n        res.end('You have sent a POST request');\r\n    }\r\n});\r\n```\r\n\r\n## routes.addRoute(path:String, view:routes)\r\n\r\nAdds a route with the given path prefix. When the route is matched, the prefix will be replaced by a slash and the resulting URL will be passed to the given routes function.\r\n\r\nExample:\r\n\r\n```javascript\r\nchildRoutes.addRoute('/bar', function(req, res) {\r\n    res.end('You have accessed /foo/bar !');\r\n});\r\nroutes.addRoute('/foo/', childRoutes); // Always use a trailing slash!\r\n```\r\n\r\n# License\r\n\r\nThe MIT/Expat license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}